###############################################################################
# CSVW Table: CSVW Dialect shape                                              #
# Author: Dylan Van Assche                                                    #
# Copyright IDLab - UGent - IMEC (2020)                                       #
###############################################################################
@prefix csvw: <http://www.w3.org/ns/csvw#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix schema: <http://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

schema:CSVWDialectShape
    a sh:NodeShape ;
    sh:targetClass csvw:Dialect ;
    sh:closed "true"^^xsd:boolean ;  # Enforce CWA
    sh:ignoredProperties (rdf:type) ;  # Already targets 'csvw:Dialect'
    sh:name "csvw:Dialect" ;
    sh:description """
    Dialect description for a CSVW Table. One csvw:delimiter, one csvw:encoding,
    one csvw:doubleQuote, one csvw:quoteChar, one csvw:escapeChar, one 
    csvw:lineTerminators, one csvw:trim, one csvw:skipInitialSpace, one 
    csvw:header, one csvw:headerRowCount, one csvw:skipColumns, one 
    csvw:skipRows and one csvw:commentPrefix are optional.
    """ ;
    sh:message "CSVW Dialect violation" ;
    sh:property [
        sh:path csvw:delimiter ;
        sh:name "csvw:delimiter" ;
        sh:description """
        An atomic property that sets the delimiter flag to the single provided 
        value, which MUST be a string.
        """ ;
        sh:message """
        The delimiter must be a string and its length must be exactly 1.
        May only be provided once.
        """ ;
        sh:minLength 1 ;
        sh:maxLength 1 ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
    ] ;
    sh:property [
        sh:path csvw:encoding ;
        sh:name "csvw:encoding" ;
        sh:description """
        An atomic property that sets the encoding flag to the single provided 
        string value, which MUST be a defined in [encoding]. The default is 
        "utf-8".

        [encoding] https://encoding.spec.whatwg.org/
        """ ;
        sh:message """
        The file encoding must match with the file encodings listed in 
        https://encoding.spec.whatwg.org/.
        May only be provided once.
        """ ;
        # Existing encoding matching, see: https://encoding.spec.whatwg.org/
        sh:pattern "(unicode-1-1-utf-8)|(unicode11utf8)|(unicode20utf8)|(utf-8)|(utf8)|(x-unicode20utf8)|(866)|(cp866)|(csibm866)|(ibm866)|(csisolatin2)|(iso-8859-2)|(iso-ir-101)|(iso8859-2)|(iso88592)|(iso_8859-2)|(iso_8859-2:1987)|(l2)|(latin2)|(csisolatin3)|(iso-8859-3)|(iso-ir-109)|(iso8859-3)|(iso88593)|(iso_8859-3)|(iso_8859-3:1988)|(l3)|(latin3)|(csisolatin4)|(iso-8859-4)|(iso-ir-110)|(iso8859-4)|(iso88594)|(iso_8859-4)|(iso_8859-4:1988)|(l4)|(latin4)|(csisolatincyrillic)|(cyrillic)|(iso-8859-5)|(iso-ir-144)|(iso8859-5)|(iso88595)|(iso_8859-5)|(iso_8859-5:1988)|(arabic)|(asmo-708)|(csiso88596e)|(csiso88596i)|(csisolatinarabic)|(ecma-114)|(iso-8859-6)|(iso-8859-6-e)|(iso-8859-6-i)|(iso-ir-127)|(iso8859-6)|(iso88596)|(iso_8859-6)|(iso_8859-6:1987)|(csisolatingreek)|(ecma-118)|(elot_928)|(greek)|(greek8)|(iso-8859-7)|(iso-ir-126)|(iso8859-7)|(iso88597)|(iso_8859-7)|(iso_8859-7:1987)|(sun_eu_greek)|(csiso88598e)|(csisolatinhebrew)|(hebrew)|(iso-8859-8)|(iso-8859-8-e)|(iso-ir-138)|(iso8859-8)|(iso88598)|(iso_8859-8)|(iso_8859-8:1988)|(visual)|(csiso88598i)|(iso-8859-8-i)|(logical)|(csisolatin6)|(iso-8859-10)|(iso-ir-157)|(iso8859-10)|(iso885910)|(l6)|(latin6)|(iso-8859-13)|(iso8859-13)|(iso885913)|(iso-8859-14)|(iso8859-14)|(iso885914)|(csisolatin9)|(iso-8859-15)|(iso8859-15)|(iso885915)|(iso_8859-15)|(l9)|(iso-8859-16)|(cskoi8r)|(koi)|(koi8)|(koi8-r)|(koi8_r)|(koi8-ru)|(koi8-u)|(csmacintosh)|(mac)|(macintosh)|(x-mac-roman)|(dos-874)|(iso-8859-11)|(iso8859-11)|(iso885911)|(tis-620)|(windows-874)|(cp1250)|(windows-1250)|(x-cp1250)|(cp1251)|(windows-1251)|(x-cp1251)|(ansi_x3.4-1968)|(ascii)|(cp1252)|(cp819)|(csisolatin1)|(ibm819)|(iso-8859-1)|(iso-ir-100)|(iso8859-1)|(iso88591)|(iso_8859-1)|(iso_8859-1:1987)|(l1)|(latin1)|(us-ascii)|(windows-1252)|(x-cp1252)|(cp1253)|(windows-1253)|(x-cp1253)|(cp1254)|(csisolatin5)|(iso-8859-9)|(iso-ir-148)|(iso8859-9)|(iso88599)|(iso_8859-9)|(iso_8859-9:1989)|(l5)|(latin5)|(windows-1254)|(x-cp1254)|(cp1255)|(windows-1255)|(x-cp1255)|(cp1256)|(windows-1256)|(x-cp1256)|(cp1257)|(windows-1257)|(x-cp1257)|(cp1258)|(windows-1258)|(x-cp1258)|(x-mac-cyrillic)|(x-mac-ukrainian)|(chinese)|(csgb2312)|(csiso58gb231280)|(gb2312)|(gb_2312)|(gb_2312-80)|(gbk)|(iso-ir-58)|(x-gbk)|(gb18030)|(big5)|(big5-hkscs)|(cn-big5)|(csbig5)|(x-x-big5)|(cseucpkdfmtjapanese)|(euc-jp)|(x-euc-jp)|(csiso2022jp)|(iso-2022-jp)|(csshiftjis)|(ms932)|(ms_kanji)|(shift-jis)|(shift_jis)|(sjis)|(windows-31j)|(x-sjis)|(cseuckr)|(csksc56011987)|(euc-kr)|(iso-ir-149)|(korean)|(ks_c_5601-1987)|(ks_c_5601-1989)|(ksc5601)|(ksc_5601)|(windows-949)|(csiso2022kr)|(hz-gb-2312)|(iso-2022-cn)|(iso-2022-cn-ext)|(iso-2022-kr)|(replacement)|(unicodefffe)|(utf-16be)|(csunicode)|(iso-10646-ucs-2)|(ucs-2)|(unicode)|(unicodefeff)|(utf-16)|(utf-16le)|(x-user-defined)" ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
    ] ;
    sh:property [
        sh:path csvw:doubleQuote ;
        sh:name "csvw:doubleQuote" ;
        sh:description """
        A boolean atomic property that, if `true`, sets the escape character 
        flag to `"`.
        """ ;
        sh:message """
        The doubleQuote flag must be a boolean.
        May only be provided once.
        """ ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:property [
        sh:path csvw:quoteChar ;
        sh:name "csvw:quoteChar" ;
        sh:description """
        An atomic property that sets the quote character flag to the single 
        provided value, which must be a string or `null`.
        """ ;
        sh:message """
        The quote character must be a string and its length must be exactly 1.
        May only be provided once.
        """ ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:minLength 1 ;
        sh:maxLength 1 ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
    ] ;
    sh:property [
        sh:path csvw:escapeChar ;
        sh:name "csvw:escapeChar" ;
        sh:description """
        The escape character to use when escaping special characters in the CSV
        file.
        Unofficially! Not supported by the CSVW specification!
        """ ;
        sh:message """
        The escape character must be a string and its length must be exactly 1.
        May only be provided once.
        """ ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:minLength 1 ;
        sh:maxLength 1 ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
    ];
    sh:property [
        sh:path csvw:lineTerminators ;
        sh:name "csvw:lineTerminators" ;
        sh:description """
        An atomic property that sets the line terminators flag to either an 
        array containing the single provided string value, or the provided 
        array.
        """ ;
        sh:message """
        The line terminators must be a string with a length of at least 1.
        May only be provided once.
        """ ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:minLength 1 ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
    ];
    sh:property [
        sh:path csvw:trim ;
        sh:name "csvw:trim";
        sh:description """
        An atomic property that, if the boolean `true`, sets the trim flag to 
        `true` and if the boolean `false` to `false`. If the value provided is 
        a string, sets the trim flag to the provided value, which must be one 
        of "true", "false", "start" or "end".
        """ ;
        sh:message """
        Trim mode must be either a boolean or a string with value "true", 
        "false", "start" or "end". May only be provided once.
        """ ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:nodeKind sh:Literal ;
        # csvw:trim can be either a boolean or string
        sh:or (
            [
                sh:datatype xsd:string;
                sh:in ("true" "false" "start" "end");
            ]
            [
                sh:datatype xsd:boolean;
                sh:in ("true"^^xsd:boolean "false"^^xsd:boolean);
            ]
        );
    ];
    sh:property [
        sh:path csvw:skipInitialSpace ;
        sh:name "csvw:skipInitialSpace" ;
        sh:description """
        A boolean atomic property that, if `true`, sets the trim flag to 
        "start". If `false`, to `false`.
        """ ;
        sh:message """
        Skip initial space flag must be a boolean. May only be provided once.
        """ ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:property [
        sh:path csvw:header ;
        sh:name "csvw:header" ;
        sh:description """
        A boolean atomic property that, if `true`, sets the header row count 
        flag to `1`, and if `false` to `0`, unless headerRowCount is provided, 
        in which case the value provided for the header property is ignored.
        """ ;
        sh:message """
        Header flag must be a boolean. May only be provided once.
        """ ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:property [
        sh:path csvw:headerRowCount ;
        sh:name "csvw:headerRowCount" ;
        sh:description """
        An numeric atomic property that sets the header row count flag to the 
        single provided value, which must be a non-negative integer.
        """ ;
        sh:message """
        The header row count must be a non-negative integer. May only be 
        provided once.
        """ ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:integer ;
        sh:minInclusive "0"^^xsd:integer;
    ] ;
    sh:property [
        sh:path csvw:skipColumns ;
        sh:name "csvw:skipColumns";
        sh:description """
        An numeric atomic property that sets the `skip columns` flag to the 
        single provided numeric value, which MUST be a non-negative integer.
        """ ;
        sh:message """
        Skip columns must be a non-negative integer. May only be provided once.
        """ ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:nodeKind sh:Literal;
        sh:datatype xsd:integer ;
        sh:minInclusive "0"^^xsd:integer;
    ] ;
    sh:property [
        sh:path csvw:skipRows ;
        sh:name "csvw:skipRows";
        sh:description """
        An numeric atomic property that sets the `skip rows` flag to the single 
        provided numeric value, which MUST be a non-negative integer.
        """ ;
        sh:message """
        Skip rows must be a non-negative integer. May only be provided once.
        """ ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:nodeKind sh:Literal;
        sh:datatype xsd:integer ;
        sh:minInclusive "0"^^xsd:integer;
    ] ;
    sh:property [
        sh:path csvw:commentPrefix ;
        sh:name "csvw:commentPrefix" ;
        sh:description """
        An atomic property that sets the comment prefix flag to the single 
        provided value, which MUST be a string.
        """ ;
        sh:message """
        Comment prefix must be a string and its length must be exactly 1.
        May only be provided once.
        """ ;
        sh:maxCount 1 ;
        sh:minCount 0 ;
        sh:minLength 1 ;
        sh:maxLength 1 ;
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:string ;
    ] ;
.
